class Solution:
    def partitionLabels(self, S):
        """
        A string S of lowercase letters is given.
        We want to partition this string into as many parts as possible so that each letter appears in at most one part,
        and return a list of integers representing the size of these parts.

        Example 1:

        Input: S = "ababcbacadefegdehijhklij"
        Output: [9,7,8]

        Explanation:
        The partition is "ababcbaca", "defegde", "hijhklij".
        This is a partition so that each letter appears in at most one part.
        A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.

        Note:

        S will have length in range [1, 500].
        S will consist of lowercase letters ('a' to 'z') only.

        :type S: str
        :rtype: List[int]
        """

        if not S:
            return []

        max_pos = dict()
        for i, c in enumerate(S):
            max_pos[c] = i

        ans = []
        s = 0
        e = max_pos[S[0]]
        while s < len(S):
            # when s meets e, a part is generated by greedy.
            if s == e:
                # update the length of the found part
                ssum = sum(ans)
                ans.append(e + 1 - ssum)

                # update s and e
                s += 1
                if s < len(S):
                    e = max_pos[S[s]]
                else:
                    break
            else:
                # keep checking chars between s and e to expanding e until s and e meets
                s += 1
                while s < e:
                    if max_pos[S[s]] > e:
                        e = max_pos[S[s]]
                    s += 1
        return ans

s = Solution()
#print(s.partitionLabels("abcd"))
print(s.partitionLabels("ababcbacadefegdehijhklij"))





